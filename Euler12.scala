// https://projecteuler.net/problem=12
/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
import annotation.tailrec

object Euler12 {

	// timer function at the top of every solution: http://biercoff.com/easily-measuring-code-execution-time-in-scala/
	def time[R](block: => R): R = {
		val t0 = System.nanoTime()
		val result = block
		val t1 = System.nanoTime()
		println("Elapsed time: " + ((t1 - t0) / 1000000.0) + "ms")
		result
	}


	def divisorCountOfX(x: Int): Int = {
			// note: doesn't work if x is 1, but irrelevant for this problem.
		val maxNum: Int = math.floor(math.sqrt(x)).toInt
		val sqrtDivisor: Int = if ((math.sqrt(x)) == maxNum) 1 else 0
		val divisorRange: Range = if (sqrtDivisor == 1) Range(2, maxNum) else Range(2, maxNum + 1)
		(divisorRange.map(n => x % n == 0).count(n => n == true) * 2) + sqrtDivisor + 2
	}
	
		// annotation to confirm this is tail-recursive
	@tailrec
	def triangleDivisors(x: Int, triangleNum: Int, divisorCount: Int): Int = {
		// If xDivisorCount is >= divisorCount, return X, otherwise increment x by one and add to running sum
		val xDivisorCount = divisorCountOfX(triangleNum)
		if (xDivisorCount > divisorCount)
			triangleNum
		else
			triangleDivisors(x + 1, triangleNum + x + 1, divisorCount)
	}
	
	def solution1(): Int = {
		triangleDivisors(2, 3, 500)
	}
	
	def main(args: Array[String]) {
		time{ println(solution1()) }
			// Elapsed time: 956.548453ms
			// a) The function doesn't actually return anything, using print statement
			// b) Almost 1s seems very slow for this problem.
			// So I want to re-write this using a more idiomatic form of recursion.
			
	}
}